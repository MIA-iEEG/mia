function varargout = ganalysis_gui(varargin)
% GANALYSIS_GUI MATLAB code for ganalysis_gui.fig
%      GANALYSIS_GUI, by itself, creates a new GANALYSIS_GUI or raises the existing
%      singleton*.
%
%      H = GANALYSIS_GUI returns the handle to a new GANALYSIS_GUI or the handle to
%      the existing singleton*.
%
%      GANALYSIS_GUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GANALYSIS_GUI.M with the given input arguments.
%
%      GANALYSIS_GUI('Property','Value',...) creates a new GANALYSIS_GUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before ganalysis_gui_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to ganalysis_gui_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help ganalysis_gui

% Last Modified by GUIDE v2.5 26-Jan-2017 09:56:00

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @ganalysis_gui_OpeningFcn, ...
    'gui_OutputFcn',  @ganalysis_gui_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before ganalysis_gui is made visible.
function ganalysis_gui_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to ganalysis_gui (see VARARGIN)

% Choose default command line output for ganalysis_gui
handles.output = hObject;

%handles.sfiles=varargin{1};
handles.m_table_as=varargin{1};
handles.maindir=varargin{2};

% Move window to the center of the screen 
movegui(gcf,'center');

%get studies name
d = dir(handles.maindir);
handles.NAMES={d.name}';
handles.NAMES(ismember(handles.NAMES,{'.','..','.DS_Store'})) = [];

%get the study ganalysis files name
handles.sfiles={};
for ii=1:length(handles.NAMES)
    d=dir(fullfile(handles.maindir,handles.NAMES{ii}));
    handles.sfiles=cat(1,handles.sfiles,{d.name}');
end
handles.sfiles(ismember(handles.sfiles,{'.','..'})) = [];
handles.sfiles(~logical(cellfun(@isempty,strfind(handles.sfiles,'cfroi'))))=[];
handles.sfiles=handles.sfiles';

% Update listbox
set(handles.list_study,'string',handles.NAMES);
set(handles.list_study,'max',1);

%compute create table of rois to get the right mia_table, edges and datafiles,
%according to the selected study
sfiles=handles.sfiles;
sFile=sfiles(get(handles.list_study,'Value'));
sFile=char(fullfile(handles.maindir,handles.NAMES(get(handles.list_study,'Value')),sFile));
OPTIONS.allow_flipsign = get(handles.allow_flipsign,'value') ; 
OPTIONS.flip_thresh = str2double(get(handles.flip_thresh,'String')) ; 
   
[handles.rois,handles.table.mia_table,handles.edges,handles.datafiles] = create_table_of_rois(handles.m_table_as, sFile, OPTIONS) ;

%create a cell table to keep cfroi 
handles.CFROI= cell(length(handles.NAMES),1);

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes ganalysis_gui wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = ganalysis_gui_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on selection change in list_study.
function list_study_Callback(hObject, eventdata, handles)
% hObject    handle to list_study (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns list_study contents as cell array
%        contents{get(hObject,'Value')} returns selected item from list_study

%update jtable when study selected study get changed
if get(handles.togglebutton1,'Value')==1
    
    delete(handles.hjtable);
    guidata(hObject, handles);
    
    sfiles=handles.sfiles;
    sFile=sfiles(get(handles.list_study,'Value'));
    sFile=char(fullfile(handles.maindir,handles.NAMES(get(handles.list_study,'Value')),sFile));
    OPTIONS.allow_flipsign = get(handles.allow_flipsign,'value') ; 
    OPTIONS.flip_thresh = str2double(get(handles.flip_thresh,'String')) ; 
   
    % Get table that contains all files (names) found in the working directory
    [handles.rois,handles.table.mia_table,handles.edges,handles.datafiles] = create_table_of_rois(handles.m_table_as, sFile,OPTIONS) ;
    jtable = com.jidesoft.grid.SortableTable(handles.table.mia_table,{'Region','Onset','Patients Correlation','Channels Correlation','Subject Num','ID'});
    tableHeader = com.jidesoft.grid.AutoFilterTableHeader(jtable);
    
        
    % Trick to hide to indexing column
    jtable.getColumnModel().getColumn(5).setMinWidth(0);
    jtable.getColumnModel().getColumn(5).setMaxWidth(0);
    jtable.getColumnModel().getColumn(5).setWidth(0);


    tableHeader.setAutoFilterEnabled(true)
    tableHeader.setShowFilterName(true)
    tableHeader.setShowFilterIcon(true)
    jtable.setTableHeader(tableHeader)
    installer = com.jidesoft.grid.TableHeaderPopupMenuInstaller(jtable);
    pmCustomizer1=com.jidesoft.grid.AutoResizePopupMenuCustomizer;
    installer.addTableHeaderPopupMenuCustomizer(pmCustomizer1);
    pmCustomizer2=com.jidesoft.grid.TableColumnChooserPopupMenuCustomizer;
    installer.addTableHeaderPopupMenuCustomizer(pmCustomizer2);
    jScrollPane = javax.swing.JScrollPane(jtable);
    
    handles.table.jtable = jtable ;
    handles.table.jScrollPane = jScrollPane ;
    
    handles.jtable = jtable ;
    [handles.hjtable,handles.hjcontainer]=javacomponent(jScrollPane,[15,10,735,290],gcf);

else
    
    %if jtable is not  displayed we just compute create table of rois to
    %get the right mia_table, edges and datafiles, according to the selected
    %study
%     sfiles=handles.sfiles;
%     sFile=sfiles(get(handles.list_study,'Value'));
%     sFile=char(fullfile(handles.maindir,handles.NAMES(get(handles.list_study,'Value')),sFile));
%     
    tmp = dir(fullfile(handles.maindir,cell2mat(handles.NAMES(get(handles.list_study,'Value')))) ; 
    isub = (
    OPTIONS.allow_flipsign = get(handles.allow_flipsign,'value') ; 
    OPTIONS.flip_thresh = str2double(get(handles.flip_thresh,'String')) ; 
   
    [handles.rois,handles.table.mia_table,handles.edges,handles.datafiles] = create_table_of_rois(handles.m_table_as, sFile,OPTIONS) ;
end
  guidata(hObject, handles);




% --- Executes during object creation, after setting all properties.
function list_study_CreateFcn(hObject, eventdata, handles)
% hObject    handle to list_study (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in togglebutton1.
function togglebutton1_Callback(hObject, eventdata, handles)
% hObject    handle to togglebutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of togglebutton1
shift = 22 ;

if (get(hObject,'Value') == get(hObject,'Max'))
    
    sfiles=handles.sfiles;
    sFile=sfiles(get(handles.list_study,'Value'));
    sFile=char(fullfile(handles.maindir,handles.NAMES(get(handles.list_study,'Value')),sFile));
    OPTIONS.allow_flipsign = get(handles.allow_flipsign,'value') ; 
    OPTIONS.flip_thresh = str2double(get(handles.flip_thresh,'String')) ; 
    
    % Get table that contains all files (names) found in the working directory
    [handles.rois,handles.table.mia_table,handles.edges,handles.datafiles] = create_table_of_rois(handles.m_table_as, sFile,OPTIONS) ;
    
    % Enlarge main figure in height and shift down
    fig_position = get(handles.figure1,'Position') ;
    fig_position(4) = fig_position(4) + shift ;
    fig_position(2) = fig_position(2) - shift ;
    set(handles.figure1,'Position',fig_position) ;
    
    uipanel_displayrois_pos = get(handles.uipanel_displayrois,'Position');
    uipanel_displayrois_pos(2) = uipanel_displayrois_pos(2) + shift;
    set(handles.uipanel_displayrois,'Position',uipanel_displayrois_pos);
    
    uipanel_study_pos = get(handles.uipanel_studies,'Position');
    uipanel_study_pos (2) = uipanel_study_pos (2) + shift;
    set(handles.uipanel_studies,'Position',uipanel_study_pos );
    
    
    uipanel_text_pos = get(handles.text,'Position');
    uipanel_text_pos  (2) = uipanel_text_pos  (2) + shift;
    set(handles.text,'Position',uipanel_text_pos  );
    
    uipanel_flip_pos = get(handles.uipanel_flip,'Position');
    uipanel_flip_pos(2) = uipanel_flip_pos(2) + shift;
    set(handles.uipanel_flip,'Position',uipanel_flip_pos );
 
    uipanel_rasterplot_pos = get(handles.uipanel_rasterplot,'Position');
    uipanel_rasterplot_pos(2) = uipanel_rasterplot_pos(2) + shift;
    set(handles.uipanel_rasterplot,'Position',uipanel_rasterplot_pos );
    
    togglebutton_pos = get(handles.togglebutton1,'Position');
    togglebutton_pos(2) = togglebutton_pos(2) + shift;
    set(handles.togglebutton1,'Position',togglebutton_pos);
    
    jtable = com.jidesoft.grid.SortableTable(handles.table.mia_table,{'Region','Onset','Patients Correlation','Channels Correlation','Subject Num','ID'});
    
    % Trick to hide to indexing column
    jtable.getColumnModel().getColumn(5).setMinWidth(0);
    jtable.getColumnModel().getColumn(5).setMaxWidth(0);
    jtable.getColumnModel().getColumn(5).setWidth(0);


    tableHeader = com.jidesoft.grid.AutoFilterTableHeader(jtable);
    tableHeader.setAutoFilterEnabled(true)
    tableHeader.setShowFilterName(true)
    tableHeader.setShowFilterIcon(true)
    jtable.setTableHeader(tableHeader)
    installer = com.jidesoft.grid.TableHeaderPopupMenuInstaller(jtable);
    pmCustomizer1=com.jidesoft.grid.AutoResizePopupMenuCustomizer;
    installer.addTableHeaderPopupMenuCustomizer(pmCustomizer1);
    pmCustomizer2=com.jidesoft.grid.TableColumnChooserPopupMenuCustomizer;
    installer.addTableHeaderPopupMenuCustomizer(pmCustomizer2);
    jScrollPane = javax.swing.JScrollPane(jtable);
    
    handles.table.jtable = jtable ;
    handles.table.jScrollPane = jScrollPane ;
    
    handles.jtable = jtable ;
    % Set the jtable uneditable 
    sclass=java.lang.String('').getClass;
    renderer=jtable.getDefaultRenderer(sclass);
    editor=jtable.getDefaultEditor(sclass);
    editor.getComponent.setEditable(0);
    editor.setClickCountToStart(intmax);

    % Set allcolumn uneditable
    for iCol=0:size(handles.table.mia_table,2)-1 
        jtable.getColumnModel.getColumn(iCol).setCellRenderer(renderer)
        jtable.getColumnModel.getColumn(iCol).setCellEditor(editor);
    end


    [handles.hjtable,handles.hjcontainer]=javacomponent(jScrollPane,[15,10,735,290],gcf);
    
    guidata(hObject, handles);
    
else
    
    % Delete Java table
    delete(handles.hjtable);
    guidata(hObject, handles);
    
    % Reduce main figure in height and shift up figure + all components
    fig_position = get(handles.figure1,'Position') ;
    fig_position(4) = fig_position(4) - shift ;
    fig_position(2) = fig_position(2) + shift ;
    set(handles.figure1,'Position',fig_position) ;
    
    uipanel_displayrois_pos = get(handles.uipanel_displayrois,'Position');
    uipanel_displayrois_pos(2) = uipanel_displayrois_pos(2) - shift;
    set(handles.uipanel_displayrois,'Position',uipanel_displayrois_pos);
    
    uipanel_study_pos = get(handles.uipanel_studies,'Position');
    uipanel_study_pos (2) = uipanel_study_pos (2) - shift;
    set(handles.uipanel_studies,'Position',uipanel_study_pos );
    
    uipanel_text_pos = get(handles.text,'Position');
    uipanel_text_pos  (2) = uipanel_text_pos  (2) -shift;
    set(handles.text,'Position',uipanel_text_pos  );
    
    uipanel_rasterplot_pos = get(handles.uipanel_rasterplot,'Position');
    uipanel_rasterplot_pos(2) = uipanel_rasterplot_pos(2) - shift;
    set(handles.uipanel_rasterplot,'Position',uipanel_rasterplot_pos );
    
    uipanel_flip_pos = get(handles.uipanel_flip,'Position');
    uipanel_flip_pos(2) = uipanel_flip_pos(2) - shift;
    set(handles.uipanel_flip,'Position',uipanel_flip_pos );
 
    togglebutton_pos = get(handles.togglebutton1,'Position');
    togglebutton_pos(2) = togglebutton_pos(2) - shift;
    set(handles.togglebutton1,'Position',togglebutton_pos);
    
    
end
  guidata(hObject, handles);


% --- Executes on button press in display_rois.
function display_rois_Callback(hObject, eventdata, handles)
% hObject    handle to display_rois (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

if get(handles.togglebutton1,'Value')==0
    errordlg('Use show table button to select a region to explore','Error');
else
    % Gets selected items in java table
    all_idx = handles.table.jtable.getSelectedRows ; 
    idx = [] ;
    % Get proper indices in case table is sorted
    for kk=1:length(all_idx); idx(kk) = str2num(handles.table.jtable.getValueAt(all_idx(kk),5)) ; end
    if isempty(idx)
        errordlg('You must select a region to explore','Error');
    % Several items selected in the table
    elseif length(idx)>0
  
        dOPTIONS.clr = jet(numel(unique(handles.m_table_as(:,1)))); % distinct colors for pt
        dOPTIONS.win_noedges = handles.edges;
        display_roi(handles.rois(idx),dOPTIONS);
    end
end
  guidata(hObject, handles);





% --- Executes on button press in diplay_summary.
function diplay_summary_Callback(hObject, eventdata, handles)
% hObject    handle to diplay_summary (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Pop a question window
ButtonName = questdlg('Display type : ', ...
    'Display ROI summary', ...
    'Colored time series','Stack plot','Flat display','Colored time series'); %,'Colored Time series with Ruban'

% No button was pressed (window closed)
if isempty(ButtonName); return ; end

if get(handles.togglebutton1,'Value')==0
    errordlg('Use show table button to select a region to explore','Error');
else
    % Gets selected items in java table
    all_idx = handles.table.jtable.getSelectedRows ; 
    idx = [] ;
    % Get proper indices in case table is sorted
    for kk=1:length(all_idx); idx(kk) = str2num(handles.table.jtable.getValueAt(all_idx(kk),5)) ; end

      if isempty(idx)
        errordlg('You must select a region to explore','Error');
        % Several items selected in the table
    elseif length(idx)>0

    switch ButtonName,
       case 'Colored time series',
            pOPTIONS.thresh =1.96; % -1 for no color chronological organization
            pOPTIONS.threshdisp = 1.96; 
            pOPTIONS.nsub =1; % number of subplot
            pOPTIONS.title = '';
            [labels_o, colorm] = display_summary_roi(handles.rois(idx),pOPTIONS) ;
        case 'Flat display',
            pOPTIONS.thresh =1.96; % -1 for no color chronological organization
            pOPTIONS.threshdisp = 1.96; 
            pOPTIONS.nsub =1; % number of subplot
            pOPTIONS.title = '';
       
            [labels_o, colorm] = display_summary_roi_flat(handles.rois(idx),pOPTIONS) ;
         
      case 'Stack plot',
           pOPTIONS.thresh =1.96; % -1 for no color chronological organization
            pOPTIONS.threshdisp = 1.96; 
            pOPTIONS.nsub =1; % number of subplot
           pOPTIONS.title = '';
       
           [labels_o, colorm] = display_summary_roi_stack(handles.rois(idx),pOPTIONS) ;
          
%            while(1) 
                [x,y]=ginput(1); % get a click
                xlim = get(gca,'xlim');
                ylim = get(gca,'ylim');
                plot([x x], ylim); % vertical line
%            end
    
%         case 'Colored Time series with Ruban',
            

    end

        
    end
end
  guidata(hObject, handles);


% --- Executes on button press in Select.
function Select_Callback(hObject, eventdata, handles)
% hObject    handle to Select (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

if get(handles.togglebutton1,'Value')==0
    errordlg('Use show table button to select a region to explore','Error');
else
    % Gets selected items in java table
    all_idx = handles.table.jtable.getSelectedRows ; 
    idx = [] ;
    % Get proper indices in case table is sorted
    for kk=1:length(all_idx); idx(kk) = str2num(handles.table.jtable.getValueAt(all_idx(kk),4)) ; end

    if isempty(idx)
        errordlg('You must select a region to explore','Error');
        % Several items selected in the table
    elseif length(idx)>0
        
        
        froi=handles.rois(idx);
        f = [froi{:}];
        pt_votes = vertcat(f.namePt) ;
        
        %Gets all unique occurence of patients
        un = unique(pt_votes);
        
        [s,~]=listdlg('PromptString','Select a subject:', 'SelectionMode','multiple','ListString',un,'Name','One Patient Data');
        
        if ~isempty(s)
            un=un(s);
            for pp=1:length(un)
                
                pOPTIONS.ptKey = un{pp};
                pOPTIONS.title = pOPTIONS.ptKey;
                pOPTIONS.thresh = 3; % -1 for no color chronological organization
                pOPTIONS.nsub =1; % number of subplot
                
                [labels_o_pt, colorm_pt] =display_summary_roi_pt(froi,pOPTIONS) ;
                %[scFile] = functional_ROIs_BST(strcat('scout_',pOPTIONS.ptKey,'_Morlet_mincor_0p3'),labels_o_pt,colorm_pt);
                
            end
        end
    end
end
  guidata(hObject, handles);


% --- Executes on button press in TRfiles.
function TRfiles_Callback(hObject, eventdata, handles)
% hObject    handle to TRfiles (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


%name of cfroi file. Could exist or not
outname_cfroi=char(fullfile(handles.maindir,handles.NAMES(get(handles.list_study,'Value')),strcat(handles.NAMES(get(handles.list_study,'Value')),'_cfroi.mat')));

ind=1;

%test if cfroi has already been computed
if exist(outname_cfroi,'file')
    
    L=load(outname_cfroi);
    n=get(handles.list_study,'Value');
    handles.CFROI{n}=L.cfroi;
        
    %list missing pt when cfroi was computed
    list_missing_pt='';
    for ii=1:length(L.RTfiles)
        if ~isempty(strfind(L.RTfiles{ii},'MiSsInG'))
            missing_pt=strtok(L.RTfiles{ii});
            list_missing_pt=[list_missing_pt, '   ' ,missing_pt];
        end
    end
    
    if ~isempty(list_missing_pt)
        choice=questdlg(sprintf('One file already exist but %s response time files was missing. Do you want to continue ?',list_missing_pt),...
            'Response Time Files already existing',...
            'Continue','Pass','Continue');
        switch choice
            case 'Continue'
                ind=1;
            case 'Pass'
                ind=0;
        end
    else
        ind=0;
    end
    
end

if ind==1
    
    %pick a directory containing TR files
    directoryname = uigetdir(handles.maindir, 'Pick a Directory containing response time files ');
    
    
    %use of cancel button
    if directoryname==0
        return;
    end
    
    
    %list files in directoryname
    d=dir(directoryname);
    files = {d.name}';
    files(ismember(files,{'.','..'})) = []; % Removes . and ..
    
    %list subject
    froi=handles.rois;
    f = [froi{:}];
    subj = vertcat(f.namePt) ;
    [subj,~,~]=unique(subj);
    
    %check we have one files for each patient and list RT files in the
    %right order
    for ii=1:length(subj)
        idx = ~logical(cellfun(@isempty,strfind(files,subj{ii})));
        
        % question if no RT files is found for a subject
        if idx==zeros(length(files),1)
            choice = questdlg(sprintf('No response time file found for %s. What would you like to do ?',subj{ii}), ...
                'Missing Response Time File', 'Skip','Cancel','Skip');
            % Handle response
            switch choice
                case 'Skip'
                    RTfiles{ii,1}=sprintf('%s MiSsInG', subj{ii});
                case 'Cancel'
                    return;
            end
        else
            RTfiles{ii,1}=char(fullfile(directoryname,files(idx)));
        end
    end
    
    
    rOPTIONS.win_noedges = handles.edges;
    rOPTIONS.maindir=handles.maindir;
    
    %check if montage is monopolar or bipolar
    NAME=handles.sfiles(get(handles.list_study,'Value'));
    id_montage=strfind(NAME,'bipolar');
    if isempty(id_montage{1})
        rOPTIONS.mtg = 'monopolar';
    else
        rOPTIONS.mtg = 'bipolar';
    end
    
    
    
    [cfroi] = s6_explore_all_rastersV1(handles.rois,handles.datafiles,RTfiles,rOPTIONS); 
        
    %save cfroi in study file
    save(outname_cfroi,'cfroi','RTfiles');
    
    n=get(handles.list_study,'Value');
    handles.CFROI{n}=cfroi;
end

    

msgbox('Response Time Files extracted correctly');
  guidata(hObject, handles);


% --- Executes on button press in diplay_rasters.
function diplay_rasters_Callback(hObject, eventdata, handles)
% hObject    handle to diplay_rasters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

  n=get(handles.list_study,'Value');

if  isempty(handles.CFROI{n})
    errordlg('You must give Response Time files using "Get TR files" button','Error');
else
    
    if get(handles.togglebutton1,'Value')==0
        errordlg('Use show table button to select a region to explore','Error');
    else
     % Gets selected items in java table
    all_idx = handles.table.jtable.getSelectedRows ; 
    idx = [] ;
    % Get proper indices in case table is sorted
    for kk=1:length(all_idx); idx(kk) = str2num(handles.table.jtable.getValueAt(all_idx(kk),4)) ; end

    if isempty(idx)
            errordlg('You must select a region to explore','Error');
            % Several items selected in the table
        elseif length(idx)>0
            
            
            dOPTIONS.clr = jet(numel(unique(handles.m_table_as(:,1)))); % distinct colors for pt
            dOPTIONS.win_noedges = handles.edges;
            dOPTIONS.isRT='Yes';
            
            cfroi = handles.CFROI{n};
            tmp=[cfroi{:}];
            selected_cfroi=cfroi(idx);
            
            for ii=1:length(selected_cfroi)
                if isempty(selected_cfroi{ii}.namePt);
                    msgbox(sprintf('No Data to display for %s region (missing RT files)',selected_cfroi{ii}.name));
                else
                getOPTIONS.roi=selected_cfroi{ii}.name;               
                display_roi_and_raster(cfroi(ismember({tmp.name},getOPTIONS.roi)),dOPTIONS)
                end
            end
        end
    end
end
  guidata(hObject, handles);
  
  


% --- Executes on button press in simple_rasters.
function simple_rasters_Callback(hObject, eventdata, handles)
% hObject    handle to simple_rasters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
if get(handles.togglebutton1,'Value')==0
        errordlg('Use show table button to select a region to explore','Error');
    else
      % Gets selected items in java table
    all_idx = handles.table.jtable.getSelectedRows ; 
    idx = [] ;
    % Get proper indices in case table is sorted
    for kk=1:length(all_idx); idx(kk) = str2num(handles.table.jtable.getValueAt(all_idx(kk),4)) ; end

    if isempty(idx)
            errordlg('You must select a region to explore','Error');
            % Several items selected in the table
        elseif length(idx)>0
            
            
            dOPTIONS.clr = jet(numel(unique(handles.m_table_as(:,1)))); % distinct colors for pt
            dOPTIONS.win_noedges = handles.edges;
            dOPTIONS.isRT='No';
            dOPTIONS.datafiles=handles.datafiles
            
            selected_roi=handles.rois(idx);
            tmp=[handles.rois{:}];
            
            for ii=1:length(selected_roi)
                getOPTIONS.roi=selected_roi{ii}.name; 
                display_roi_and_raster(handles.rois(ismember({tmp.name},getOPTIONS.roi)),dOPTIONS)
            end
            
        end
end
      guidata(hObject, handles);


% --- Executes during object creation, after setting all properties.
function uipanel_displayrois_CreateFcn(hObject, eventdata, handles)
% hObject    handle to uipanel_displayrois (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called


% --- Executes during object creation, after setting all properties.
function uipanel_rasterplot_CreateFcn(hObject, eventdata, handles)
% hObject    handle to uipanel_rasterplot (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called


% --- Executes on button press in allow_flipsign.
function allow_flipsign_Callback(hObject, eventdata, handles)
% hObject    handle to allow_flipsign (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hide (toggle callback) table if check button was checked or unchecked
if  get(handles.togglebutton1,'Value')== 1
    set(handles.togglebutton1,'Value',0); 
    togglebutton1_Callback(handles.togglebutton1, eventdata, handles);
end

function flip_thresh_Callback(hObject, eventdata, handles)
% hObject    handle to flip_thresh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of flip_thresh as text
%        str2double(get(hObject,'String')) returns contents of flip_thresh as a double
flip_thresh = str2double(get(hObject, 'String'));
if isnan(flip_thresh)
    set(hObject, 'String', 0);
    errordlg('Input must be a number','Error');
end
% Hide (toggle callback) table if check button was checked or unchecked
if  get(handles.togglebutton1,'Value')== 1
    set(handles.togglebutton1,'Value',0); 
    togglebutton1_Callback(handles.togglebutton1, eventdata, handles);
end


% --- Executes during object creation, after setting all properties.
function flip_thresh_CreateFcn(hObject, eventdata, handles)
% hObject    handle to flip_thresh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called
